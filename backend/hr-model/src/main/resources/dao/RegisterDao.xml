<?xml version="1.0" encoding="UTF-8"?>
<JdbcEntitySetup
        xmlns="http://www.ontimize.com/schema/jdbc"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd"
        catalog="" schema="${mainschema}" table="registros_camiones"
        datasource="mainDataSource" sqlhandler="dbSQLStatementHandler">
    <DeleteKeys>
        <Column>id</Column>
    </DeleteKeys>
    <UpdateKeys>
        <Column>id</Column>
    </UpdateKeys>
    <GeneratedKey>id</GeneratedKey>

    <Queries>
        <Query id="completed">

            <Sentence>
                <![CDATA[
     SELECT
      #COLUMNS#
     from registros_camiones rc
    left join delivery_notes dn on rc.id_delivery_note = dn.id_delivery_note
    left join plates p on rc.id_plate =p.id_plate
    left join trailer_plates tp on rc.id_trailer_plate =tp.id_trailer_plate
     #WHERE#
   ]]>
            </Sentence>
        </Query>

        <Query id="traffic_date">
            <Sentence>
                <![CDATA[
WITH WRAPER AS(
	WITH date_range as (
		SELECT generate_series(
			(SELECT MIN(date_in) FROM registros_camiones),
			(SELECT MAX(date_in) FROM registros_camiones),
			'1 day'
		)::DATE AS generated_date
	)
	    SELECT  extract(epoch from date_range.generated_date) * 1000 as date_bigint, COALESCE(conteo, 0) as acumulated
	    FROM date_range
	    LEFT JOIN (
		    select extract(epoch from date(date_in)) * 1000 as fecha, COUNT(*) AS conteo
		    FROM registros_camiones sr
		    GROUP BY date(date_in)
	    ) AS sr_count ON extract(epoch from date_range.generated_date) * 1000 = sr_count.fecha
	    ORDER BY date_range.generated_date
    )
SELECT *  FROM WRAPER
#WHERE#;
                ]]>
            </Sentence>
        </Query>
        <Query id="completed_discrepancy">

            <Sentence>
                <![CDATA[
with T as (
	select *,
	abs(scan_volume_in -scan_volume_out) as volume_diference,
	case
		when calculated_volume <1
		then null
		when abs(scan_volume_in -scan_volume_out)<1
		then null
		else abs(calculated_volume - abs(scan_volume_in -scan_volume_out))/calculated_volume
	end as discrepancia
	from registros_camiones rc
	left join delivery_notes dn on rc.id_delivery_note = dn.id_delivery_note
    left join plates p on rc.id_plate =p.id_plate
    left join trailer_plates tp on rc.id_trailer_plate =tp.id_trailer_plate
    left join orders o on rc.id_order =o.id_order
)
SELECT #COLUMNS# from T #WHERE#
   ]]>
            </Sentence>
        </Query>

        <Query id="balance">
            <Sentence>
                <![CDATA[
with WRAPER AS(
	WITH date_range AS(
	    SELECT
		    generate_series(
		        (SELECT MIN(date_in) FROM registros_camiones),
		        (SELECT MAX(date_in) FROM registros_camiones),
		        '1 day'
		        )::DATE AS generated_date
	    )
	    SELECT
		    extract(epoch from date_range.generated_date) * 1000  as date_bigint,
		    coalesce(vol_in_acumulado,0) as acumulated_in,
		    coalesce(vol_out_acumulado,0) as acumulated_out
	    FROM date_range
	    LEFT JOIN (
	        SELECT
		        extract(epoch from date(date_in)) * 1000 as fecha,
		        sum(scan_volume_in) as vol_in_acumulado,
		        sum(scan_volume_out)  as vol_out_acumulado
	        FROM registros_camiones sr
	        GROUP BY date(date_in)
	    )
	    AS sr_count
	    ON extract(epoch from date_range.generated_date) * 1000 = sr_count.fecha
	    ORDER BY date_range.generated_date
	)
select
	date_bigint ,
	round((acumulated_in-acumulated_out)::numeric,2) acumulated_diff,
	round(acumulated_in::numeric,2) as acumulated_in,
	round(acumulated_out::numeric,2) as acumulated_out
from wraper
#WHERE#;
                ]]>
            </Sentence>
        </Query>

        <Query id="affluence">
            <Sentence>
                <![CDATA[

                with date_range as
    (SELECT generate_series(
                    (SELECT MIN(date_in)
                    FROM registros_camiones),
                    (SELECT MAX(date_in) FROM registros_camiones), '1 hour' ) AS generated_date)
             select extract(dow from date_range.generated_date::DATE) as day_date,
             to_char(date_range.generated_date, 'HH24') as day_hour,
             coalesce (sum(conteo)/count(extract(dow from date_range.generated_date::DATE)),0) as afluencia
             from date_range
             left join(
             	select sr_count_wrapper.date_bigint, sr_count_wrapper.hora , sr_count_wrapper.conteo
             	from (
                 select extract (epoch from date(date_in)) * 1000 as date_bigint,
                 to_char(date_in,'HH24') as hora,
                 count(*) as conteo
                 from registros_camiones sr
                 group by date_bigint,to_char(date_in,'HH24')
                ) as sr_count_wrapper
                #WHERE#
             )as sr_count
             on (date_range.generated_date::DATE)=to_timestamp(sr_count.date_bigint / 1000)::DATE and (to_char(date_range.generated_date, 'HH24'))=sr_count.hora
             group by day_date,to_char(date_range.generated_date, 'HH24')
             having extract(dow from date_range.generated_date::DATE)>0
                 and to_char(date_range.generated_date, 'HH24')::numeric<=22
                 and to_char(date_range.generated_date, 'HH24')::numeric>=06
               order by day_date,to_char(date_range.generated_date, 'HH24')
                ]]>
            </Sentence>
        </Query>

    </Queries>
</JdbcEntitySetup>